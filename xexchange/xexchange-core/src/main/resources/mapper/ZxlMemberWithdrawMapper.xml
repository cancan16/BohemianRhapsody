<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.whoiszxl.core.entity.dao.ZxlMemberWithdrawMapper">
  <resultMap id="BaseResultMap" type="com.whoiszxl.core.entity.entity.ZxlMemberWithdraw">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="member_id" jdbcType="VARCHAR" property="member_id" />
    <result column="coin_id" jdbcType="INTEGER" property="coin_id" />
    <result column="coin_name" jdbcType="VARCHAR" property="coin_name" />
    <result column="tx_hash" jdbcType="VARCHAR" property="tx_hash" />
    <result column="withdraw_all" jdbcType="DECIMAL" property="withdraw_all" />
    <result column="withdraw_fee" jdbcType="DECIMAL" property="withdraw_fee" />
    <result column="withdraw_actual" jdbcType="DECIMAL" property="withdraw_actual" />
    <result column="from_address" jdbcType="VARCHAR" property="from_address" />
    <result column="to_address" jdbcType="VARCHAR" property="to_address" />
    <result column="audit_at" jdbcType="TIMESTAMP" property="audit_at" />
    <result column="audit_uid" jdbcType="VARCHAR" property="audit_uid" />
    <result column="audit_status" jdbcType="Integer" property="audit_status" />
    <result column="upchain_at" jdbcType="TIMESTAMP" property="upchain_at" />
    <result column="upchain_success_at" jdbcType="TIMESTAMP" property="upchain_success_at" />
    <result column="upchain_status" jdbcType="Integer" property="upchain_status" />
    <result column="created_at" jdbcType="TIMESTAMP" property="created_at" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updated_at" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, member_id, coin_id, coin_name, tx_hash, withdraw_all, withdraw_fee, withdraw_actual, 
    from_address, to_address, audit_at, audit_uid, audit_status, upchain_at, upchain_success_at, 
    upchain_status, created_at, updated_at
  </sql>
  <select id="selectByExample" parameterType="com.whoiszxl.core.entity.entity.ZxlMemberWithdrawExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from zxl_member_withdraw
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from zxl_member_withdraw
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from zxl_member_withdraw
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.whoiszxl.core.entity.entity.ZxlMemberWithdrawExample">
    delete from zxl_member_withdraw
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.whoiszxl.core.entity.entity.ZxlMemberWithdraw">
    insert into zxl_member_withdraw (id, member_id, coin_id, 
      coin_name, tx_hash, withdraw_all, 
      withdraw_fee, withdraw_actual, from_address, 
      to_address, audit_at, audit_uid, 
      audit_status, upchain_at, upchain_success_at, 
      upchain_status, created_at, updated_at
      )
    values (#{id,jdbcType=BIGINT}, #{member_id,jdbcType=VARCHAR}, #{coin_id,jdbcType=INTEGER}, 
      #{coin_name,jdbcType=VARCHAR}, #{tx_hash,jdbcType=VARCHAR}, #{withdraw_all,jdbcType=DECIMAL}, 
      #{withdraw_fee,jdbcType=DECIMAL}, #{withdraw_actual,jdbcType=DECIMAL}, #{from_address,jdbcType=VARCHAR}, 
      #{to_address,jdbcType=VARCHAR}, #{audit_at,jdbcType=TIMESTAMP}, #{audit_uid,jdbcType=VARCHAR}, 
      #{audit_status,jdbcType=Integer}, #{upchain_at,jdbcType=TIMESTAMP}, #{upchain_success_at,jdbcType=TIMESTAMP}, 
      #{upchain_status,jdbcType=Integer}, #{created_at,jdbcType=TIMESTAMP}, #{updated_at,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.whoiszxl.core.entity.entity.ZxlMemberWithdraw">
    insert into zxl_member_withdraw
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="member_id != null">
        member_id,
      </if>
      <if test="coin_id != null">
        coin_id,
      </if>
      <if test="coin_name != null">
        coin_name,
      </if>
      <if test="tx_hash != null">
        tx_hash,
      </if>
      <if test="withdraw_all != null">
        withdraw_all,
      </if>
      <if test="withdraw_fee != null">
        withdraw_fee,
      </if>
      <if test="withdraw_actual != null">
        withdraw_actual,
      </if>
      <if test="from_address != null">
        from_address,
      </if>
      <if test="to_address != null">
        to_address,
      </if>
      <if test="audit_at != null">
        audit_at,
      </if>
      <if test="audit_uid != null">
        audit_uid,
      </if>
      <if test="audit_status != null">
        audit_status,
      </if>
      <if test="upchain_at != null">
        upchain_at,
      </if>
      <if test="upchain_success_at != null">
        upchain_success_at,
      </if>
      <if test="upchain_status != null">
        upchain_status,
      </if>
      <if test="created_at != null">
        created_at,
      </if>
      <if test="updated_at != null">
        updated_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="member_id != null">
        #{member_id,jdbcType=VARCHAR},
      </if>
      <if test="coin_id != null">
        #{coin_id,jdbcType=INTEGER},
      </if>
      <if test="coin_name != null">
        #{coin_name,jdbcType=VARCHAR},
      </if>
      <if test="tx_hash != null">
        #{tx_hash,jdbcType=VARCHAR},
      </if>
      <if test="withdraw_all != null">
        #{withdraw_all,jdbcType=DECIMAL},
      </if>
      <if test="withdraw_fee != null">
        #{withdraw_fee,jdbcType=DECIMAL},
      </if>
      <if test="withdraw_actual != null">
        #{withdraw_actual,jdbcType=DECIMAL},
      </if>
      <if test="from_address != null">
        #{from_address,jdbcType=VARCHAR},
      </if>
      <if test="to_address != null">
        #{to_address,jdbcType=VARCHAR},
      </if>
      <if test="audit_at != null">
        #{audit_at,jdbcType=TIMESTAMP},
      </if>
      <if test="audit_uid != null">
        #{audit_uid,jdbcType=VARCHAR},
      </if>
      <if test="audit_status != null">
        #{audit_status,jdbcType=Integer},
      </if>
      <if test="upchain_at != null">
        #{upchain_at,jdbcType=TIMESTAMP},
      </if>
      <if test="upchain_success_at != null">
        #{upchain_success_at,jdbcType=TIMESTAMP},
      </if>
      <if test="upchain_status != null">
        #{upchain_status,jdbcType=Integer},
      </if>
      <if test="created_at != null">
        #{created_at,jdbcType=TIMESTAMP},
      </if>
      <if test="updated_at != null">
        #{updated_at,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.whoiszxl.core.entity.entity.ZxlMemberWithdrawExample" resultType="java.lang.Long">
    select count(*) from zxl_member_withdraw
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update zxl_member_withdraw
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.member_id != null">
        member_id = #{record.member_id,jdbcType=VARCHAR},
      </if>
      <if test="record.coin_id != null">
        coin_id = #{record.coin_id,jdbcType=INTEGER},
      </if>
      <if test="record.coin_name != null">
        coin_name = #{record.coin_name,jdbcType=VARCHAR},
      </if>
      <if test="record.tx_hash != null">
        tx_hash = #{record.tx_hash,jdbcType=VARCHAR},
      </if>
      <if test="record.withdraw_all != null">
        withdraw_all = #{record.withdraw_all,jdbcType=DECIMAL},
      </if>
      <if test="record.withdraw_fee != null">
        withdraw_fee = #{record.withdraw_fee,jdbcType=DECIMAL},
      </if>
      <if test="record.withdraw_actual != null">
        withdraw_actual = #{record.withdraw_actual,jdbcType=DECIMAL},
      </if>
      <if test="record.from_address != null">
        from_address = #{record.from_address,jdbcType=VARCHAR},
      </if>
      <if test="record.to_address != null">
        to_address = #{record.to_address,jdbcType=VARCHAR},
      </if>
      <if test="record.audit_at != null">
        audit_at = #{record.audit_at,jdbcType=TIMESTAMP},
      </if>
      <if test="record.audit_uid != null">
        audit_uid = #{record.audit_uid,jdbcType=VARCHAR},
      </if>
      <if test="record.audit_status != null">
        audit_status = #{record.audit_status,jdbcType=Integer},
      </if>
      <if test="record.upchain_at != null">
        upchain_at = #{record.upchain_at,jdbcType=TIMESTAMP},
      </if>
      <if test="record.upchain_success_at != null">
        upchain_success_at = #{record.upchain_success_at,jdbcType=TIMESTAMP},
      </if>
      <if test="record.upchain_status != null">
        upchain_status = #{record.upchain_status,jdbcType=Integer},
      </if>
      <if test="record.created_at != null">
        created_at = #{record.created_at,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updated_at != null">
        updated_at = #{record.updated_at,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update zxl_member_withdraw
    set id = #{record.id,jdbcType=BIGINT},
      member_id = #{record.member_id,jdbcType=VARCHAR},
      coin_id = #{record.coin_id,jdbcType=INTEGER},
      coin_name = #{record.coin_name,jdbcType=VARCHAR},
      tx_hash = #{record.tx_hash,jdbcType=VARCHAR},
      withdraw_all = #{record.withdraw_all,jdbcType=DECIMAL},
      withdraw_fee = #{record.withdraw_fee,jdbcType=DECIMAL},
      withdraw_actual = #{record.withdraw_actual,jdbcType=DECIMAL},
      from_address = #{record.from_address,jdbcType=VARCHAR},
      to_address = #{record.to_address,jdbcType=VARCHAR},
      audit_at = #{record.audit_at,jdbcType=TIMESTAMP},
      audit_uid = #{record.audit_uid,jdbcType=VARCHAR},
      audit_status = #{record.audit_status,jdbcType=Integer},
      upchain_at = #{record.upchain_at,jdbcType=TIMESTAMP},
      upchain_success_at = #{record.upchain_success_at,jdbcType=TIMESTAMP},
      upchain_status = #{record.upchain_status,jdbcType=Integer},
      created_at = #{record.created_at,jdbcType=TIMESTAMP},
      updated_at = #{record.updated_at,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.whoiszxl.core.entity.entity.ZxlMemberWithdraw">
    update zxl_member_withdraw
    <set>
      <if test="member_id != null">
        member_id = #{member_id,jdbcType=VARCHAR},
      </if>
      <if test="coin_id != null">
        coin_id = #{coin_id,jdbcType=INTEGER},
      </if>
      <if test="coin_name != null">
        coin_name = #{coin_name,jdbcType=VARCHAR},
      </if>
      <if test="tx_hash != null">
        tx_hash = #{tx_hash,jdbcType=VARCHAR},
      </if>
      <if test="withdraw_all != null">
        withdraw_all = #{withdraw_all,jdbcType=DECIMAL},
      </if>
      <if test="withdraw_fee != null">
        withdraw_fee = #{withdraw_fee,jdbcType=DECIMAL},
      </if>
      <if test="withdraw_actual != null">
        withdraw_actual = #{withdraw_actual,jdbcType=DECIMAL},
      </if>
      <if test="from_address != null">
        from_address = #{from_address,jdbcType=VARCHAR},
      </if>
      <if test="to_address != null">
        to_address = #{to_address,jdbcType=VARCHAR},
      </if>
      <if test="audit_at != null">
        audit_at = #{audit_at,jdbcType=TIMESTAMP},
      </if>
      <if test="audit_uid != null">
        audit_uid = #{audit_uid,jdbcType=VARCHAR},
      </if>
      <if test="audit_status != null">
        audit_status = #{audit_status,jdbcType=Integer},
      </if>
      <if test="upchain_at != null">
        upchain_at = #{upchain_at,jdbcType=TIMESTAMP},
      </if>
      <if test="upchain_success_at != null">
        upchain_success_at = #{upchain_success_at,jdbcType=TIMESTAMP},
      </if>
      <if test="upchain_status != null">
        upchain_status = #{upchain_status,jdbcType=Integer},
      </if>
      <if test="created_at != null">
        created_at = #{created_at,jdbcType=TIMESTAMP},
      </if>
      <if test="updated_at != null">
        updated_at = #{updated_at,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.whoiszxl.core.entity.entity.ZxlMemberWithdraw">
    update zxl_member_withdraw
    set member_id = #{member_id,jdbcType=VARCHAR},
      coin_id = #{coin_id,jdbcType=INTEGER},
      coin_name = #{coin_name,jdbcType=VARCHAR},
      tx_hash = #{tx_hash,jdbcType=VARCHAR},
      withdraw_all = #{withdraw_all,jdbcType=DECIMAL},
      withdraw_fee = #{withdraw_fee,jdbcType=DECIMAL},
      withdraw_actual = #{withdraw_actual,jdbcType=DECIMAL},
      from_address = #{from_address,jdbcType=VARCHAR},
      to_address = #{to_address,jdbcType=VARCHAR},
      audit_at = #{audit_at,jdbcType=TIMESTAMP},
      audit_uid = #{audit_uid,jdbcType=VARCHAR},
      audit_status = #{audit_status,jdbcType=Integer},
      upchain_at = #{upchain_at,jdbcType=TIMESTAMP},
      upchain_success_at = #{upchain_success_at,jdbcType=TIMESTAMP},
      upchain_status = #{upchain_status,jdbcType=Integer},
      created_at = #{created_at,jdbcType=TIMESTAMP},
      updated_at = #{updated_at,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>